name: Upload Video to YouTube in Parts

on:
  workflow_dispatch:
    inputs:
      stream_url:
        description: 'Base URL del stream HLS (termina con /1080p60/)'
        required: true
        default: ''
      video_title:
        description: 'Título opcional'
        required: false
        default: ''
      video_description:
        description: 'Descripción'
        required: true
        default: ''

jobs:
  upload-video:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Prepare environment
        run: |
          sudo mkdir -p /mnt/workspace
          sudo chown $USER:$USER /mnt/workspace
          mkdir -p /mnt/workspace/temp_parts

      - name: Install dependencies
        run: |
          pip install --upgrade google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client requests oauth2client tqdm m3u8
          sudo apt update
          sudo apt install -y ffmpeg wget

      - name: Download authentication files
        working-directory: /mnt/workspace
        run: |
          wget https://github.com/nebulafox92/yt/raw/refs/heads/main/oauth2.json
          wget https://github.com/nebulafox92/yt/raw/refs/heads/main/script.py

      - name: Download and process segments with absolute URLs
        working-directory: /mnt/workspace
        run: |
          # Obtener valores de entrada
          STREAM_BASE_URL="${{ github.event.inputs.stream_url }}"
          INPUT_TITLE="${{ github.event.inputs.video_title }}"
          INPUT_DESCRIPTION="${{ github.event.inputs.video_description }}"

          # Extraer año, mes y día de la URL si no se ha proporcionado un título
          YEAR=$(echo "$STREAM_BASE_URL" | awk -F'/' '{print $(NF-9)}')
          MONTH=$(echo "$STREAM_BASE_URL" | awk -F'/' '{print $(NF-8)}')
          DAY=$(echo "$STREAM_BASE_URL" | awk -F'/' '{print $(NF-7)}')

          AUTO_TITLE=$(printf "%02d/%02d/%s" "$DAY" "$MONTH" "$YEAR")

          # Si existe INPUT_TITLE, se usa; si no, se usa el AUTO_TITLE
          if [ -n "$INPUT_TITLE" ]; then
            VIDEO_TITLE="$INPUT_TITLE"
          else
            VIDEO_TITLE="$AUTO_TITLE"
          fi

          echo "Stream URL: $STREAM_BASE_URL"
          echo "Video title: $VIDEO_TITLE"
          echo "Video description: $INPUT_DESCRIPTION"

          # Descargar el playlist principal
          wget --user-agent="Mozilla/5.0" "${STREAM_BASE_URL}playlist.m3u8" -O master.m3u8

          # Parsear y procesar los segmentos con URLs absolutas
          python -c "
          import m3u8
          base_url = '${STREAM_BASE_URL}'
          playlist = m3u8.load('master.m3u8')
          segments = [base_url + seg.uri if not seg.uri.startswith('http') else seg.uri for seg in playlist.segments]
          total = len(segments)
          split_point = total // 2 + total % 2
          print(f'Total segments: {total}')
          print(f'First part segments: {split_point}')
          print(f'Second part segments: {total - split_point}')
          with open('segments_absolute_part1.txt', 'w') as f:
              f.write('\n'.join(segments[:split_point]))
          with open('segments_absolute_part2.txt', 'w') as f:
              f.write('\n'.join(segments[split_point:]))
          "

          # Procesar primera parte
          echo "Downloading and concatenating first part..."
          ffmpeg -f concat -safe 0 -protocol_whitelist "file,http,https,tcp,tls" \
            -i <(for f in $(cat segments_absolute_part1.txt); do echo "file '$f'"; done) \
            -c copy -y /mnt/workspace/temp_parts/part1.ts

          echo "Uploading first part..."
          python script.py --file /mnt/workspace/temp_parts/part1.ts --title "Vector | $VIDEO_TITLE | 1/2" --description "$INPUT_DESCRIPTION"
          rm /mnt/workspace/temp_parts/part1.ts segments_absolute_part1.txt

          # Procesar segunda parte
          echo "Downloading and concatenating second part..."
          ffmpeg -f concat -safe 0 -protocol_whitelist "file,http,https,tcp,tls" \
            -i <(for f in $(cat segments_absolute_part2.txt); do echo "file '$f'"; done) \
            -c copy -y /mnt/workspace/temp_parts/part2.ts

          echo "Waiting 2 hours before next upload..."
          sleep 7200

          echo "Uploading second part..."
          python script.py --file /mnt/workspace/temp_parts/part2.ts --title "Vector | $VIDEO_TITLE | 2/2" --description "$INPUT_DESCRIPTION"
          rm /mnt/workspace/temp_parts/part2.ts segments_absolute_part2.txt master.m3u8
